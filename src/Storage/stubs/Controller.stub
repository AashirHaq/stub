<?php

namespace App\Http\Controllers\Admin;

use App\Http\Requests\{{modelName}}Store;
use App\Http\Controllers\Controller;
use App\Http\Services\Admin\{{{modelName}}Service, RouterService};
use Illuminate\Support\Facades\Log;

class {{modelName}}Controller extends Controller
{
    protected $entity, $router, $service, $routerService;

    public function __construct()
    {
        $this->entity = '{{modelNameSlugCase}}';
        $this->router = 'admin.{{modelNameSlugCase}}.index';
        $this->service = new {{modelName}}Service();
        $this->routerService = new RouterService();
    }

    public function index()
    {
        $entity = $this->entity;
        $records = $this->service->list();
        return view('admin.'.$this->entity.'.index', compact('entity', 'records'));
    }

    public function create()
    {
        $entity = $this->entity;
        return view('admin.'.$this->entity.'.create', compact('entity'));
    }

    public function store({{modelName}}Store $request)
    {
        $data = $request->validated();
        $message = 'Record successfully created.';
        $error = false;

        try {
            $this->service->create($data);
        } catch (\Exception $e) {
            Log::error($e);
            $error = true;
            $message = $e->getMessage();
        }

        if($error)
            return $this->routerService->redirectBack($error, $message);
        return $this->routerService->redirect($this->router, $error, $message);
    }

    public function edit($id)
    {
        $entity = $this->entity;
        $record = $this->service->fetch($id);
        return view('admin.'.$this->entity.'.edit', compact('entity', 'record'));
    }

    public function update({{modelName}}Store $request, $id)
    {
        $data = $request->validated();
        $message = 'Record successfully updated.';
        $error = false;

        try {
            $this->service->edit($data, $id);
        } catch (\Exception $e) {
            Log::error($e);
            $error = true;
            $message = $e->getMessage();
        }

        if($error)
            return $this->routerService->redirectBack($error, $message);
        return $this->routerService->redirect($this->router, $error, $message);
    }

    public function destroy($id)
    {
        $error = false;
        $message = 'Record successfully deleted.';

        try {
            $this->service->delete($id);
        } catch (\Exception $e) {
            Log::error($e);
            $error = true;
            $message = $e->getMessage();
        }

        if($error)
            return $this->routerService->redirectBack($error, $message);
        return $this->routerService->redirect($this->router, $error, $message);
    }
}
